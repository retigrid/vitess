apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  creationTimestamp: null
  generation: 1
  labels:
    app: vitess
    cell: zone1
    component: vttablet
    keyspace: main
    shard: 80-x
    type: replica
  name: zone1-main-80-x-replica
  selfLink: /apis/apps/v1beta1/namespaces/default/statefulsets/zone1-main-80-x-replica
spec:
  podManagementPolicy: OrderedReady
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: vitess
      cell: zone1
      component: vttablet
      keyspace: main
      shard: 80-x
      type: replica
  serviceName: vttablet
  template:
    metadata:
      annotations:
        pod.alpha.kubernetes.io/init-containers: '[{"name":"init-vtdataroot","image":"vitess/lite:latest","command":["bash","-c","
          set -ex; mkdir -p $VTDATAROOT/tmp; chown vitess:vitess $VTDATAROOT $VTDATAROOT/tmp;
          "],"resources":{},"volumeMounts":[{"name":"vtdataroot","mountPath":"/vt/vtdataroot"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"},{"name":"init-tablet-uid","image":"vitess/lite:latest","command":["bash","-c","
          set -ex\n # Split pod name (via hostname) into prefix and ordinal index.\n
          hostname=$(hostname -s)\n [[ $hostname =~ ^(.+)-([0-9]+)$ ]] || exit 1\n
          pod_prefix=${BASH_REMATCH[1]}\n pod_index=${BASH_REMATCH[2]}\n # Prepend
          cell name since tablet UIDs must be globally unique.\n uid_name=zone1-$pod_prefix\n
          # Take MD5 hash of cellname-podprefix.\n uid_hash=$(echo -n $uid_name |
          md5sum | awk \"{print \\$1}\")\n # Take first 24 bits of hash, convert to
          decimal.\n # Shift left 2 decimal digits, add in index.\n tablet_uid=$((16#${uid_hash:0:6}
          * 100 + $pod_index))\n # Save UID for other containers to read.\n mkdir
          -p $VTDATAROOT/init\n echo $tablet_uid \u003e $VTDATAROOT/init/tablet-uid\n
          # Tell MySQL what hostname to report in SHOW SLAVE HOSTS.\n # Orchestrator
          looks there, so it should match -tablet_hostname above.\n echo report-host=$hostname.vttablet
          \u003e $VTDATAROOT/init/report-host.cnf\n "],"resources":{},"volumeMounts":[{"name":"vtdataroot","mountPath":"/vt/vtdataroot"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always","securityContext":{"runAsUser":999}}]'
        pod.alpha.kubernetes.io/initialized: "true"
        pod.beta.kubernetes.io/init-containers: '[{"name":"init-vtdataroot","image":"vitess/lite:latest","command":["bash","-c","
          set -ex; mkdir -p $VTDATAROOT/tmp; chown vitess:vitess $VTDATAROOT $VTDATAROOT/tmp;
          "],"resources":{},"volumeMounts":[{"name":"vtdataroot","mountPath":"/vt/vtdataroot"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent"},{"name":"init-tablet-uid","image":"vitess/lite:latest","command":["bash","-c","
          set -ex\n # Split pod name (via hostname) into prefix and ordinal index.\n
          hostname=$(hostname -s)\n [[ $hostname =~ ^(.+)-([0-9]+)$ ]] || exit 1\n
          pod_prefix=${BASH_REMATCH[1]}\n pod_index=${BASH_REMATCH[2]}\n # Prepend
          cell name since tablet UIDs must be globally unique.\n uid_name=zone1-$pod_prefix\n
          # Take MD5 hash of cellname-podprefix.\n uid_hash=$(echo -n $uid_name |
          md5sum | awk \"{print \\$1}\")\n # Take first 24 bits of hash, convert to
          decimal.\n # Shift left 2 decimal digits, add in index.\n tablet_uid=$((16#${uid_hash:0:6}
          * 100 + $pod_index))\n # Save UID for other containers to read.\n mkdir
          -p $VTDATAROOT/init\n echo $tablet_uid \u003e $VTDATAROOT/init/tablet-uid\n
          # Tell MySQL what hostname to report in SHOW SLAVE HOSTS.\n # Orchestrator
          looks there, so it should match -tablet_hostname above.\n echo report-host=$hostname.vttablet
          \u003e $VTDATAROOT/init/report-host.cnf\n "],"resources":{},"volumeMounts":[{"name":"vtdataroot","mountPath":"/vt/vtdataroot"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"Always","securityContext":{"runAsUser":999}}]'
      creationTimestamp: null
      labels:
        app: vitess
        cell: zone1
        component: vttablet
        keyspace: main
        shard: 80-x
        type: replica
    spec:
      containers:
      - command:
        - bash
        - -c
        - "set -ex\neval exec /vt/bin/vttablet $(cat <<END_OF_COMMAND\n  -topo_implementation
          \"etcd\"\n  -etcd_global_addrs \"http://etcd-global:4001\"\n  -log_dir \"$VTDATAROOT/tmp\"\n
          \ -alsologtostderr\n  -port 15002\n  -grpc_port 16002\n  -service_map \"grpc-queryservice,grpc-tabletmanager,grpc-updatestream\"\n
          \ -tablet-path \"zone1-$(cat $VTDATAROOT/init/tablet-uid)\"\n\n  -tablet_hostname
          \"$(hostname).vttablet\"\n\n  -init_keyspace \"main\"\n  -init_shard \"80-\"\n
          \ -init_tablet_type \"replica\"\n  -health_check_interval \"5s\"\n  -mysqlctl_socket
          \"$VTDATAROOT/mysqlctl.sock\"\n  -db-config-app-uname \"vt_app\"\n  -db-config-app-dbname
          \"vt_main\"\n  -db-config-app-charset \"utf8\"\n  -db-config-dba-uname \"vt_dba\"\n
          \ -db-config-dba-dbname \"vt_main\"\n  -db-config-dba-charset \"utf8\"\n
          \ -db-config-repl-uname \"vt_repl\"\n  -db-config-repl-dbname \"vt_main\"\n
          \ -db-config-repl-charset \"utf8\"\n  -db-config-filtered-uname \"vt_filtered\"\n
          \ -db-config-filtered-dbname \"vt_main\"\n  -db-config-filtered-charset
          \"utf8\"\n  -enable_semi_sync\n  -enable_replication_reporter\n  -orc_api_url
          \"http://orchestrator/api\"\n  -orc_discover_interval \"5m\"\n  -restore_from_backup\n
          \ -backup_storage_implementation=\"gcs\"\n  -gcs_backup_storage_bucket=\"wizdear-iot-cluster-backup-bucket\"\n
          \ \nEND_OF_COMMAND\n)\n"
        image: vitess/lite:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /debug/vars
            port: 15002
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: vttablet
        ports:
        - containerPort: 15002
          name: web
          protocol: TCP
        - containerPort: 16002
          name: grpc
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
        securityContext:
          runAsUser: 999
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /dev/log
          name: syslog
        - mountPath: /vt/vtdataroot
          name: vtdataroot
        - mountPath: /etc/ssl/certs/ca-certificates.crt
          name: certs
          readOnly: true
      - command:
        - bash
        - -c
        - "set -ex\neval exec /vt/bin/mysqlctld $(cat <<END_OF_COMMAND\n  -log_dir
          \"$VTDATAROOT/tmp\"\n  -alsologtostderr\n  -tablet_uid \"$(cat $VTDATAROOT/init/tablet-uid)\"\n
          \ -socket_file \"$VTDATAROOT/mysqlctl.sock\"\n  -db-config-dba-uname \"vt_dba\"\n
          \ -db-config-dba-charset \"utf8\"\n  -init_db_sql_file \"$VTROOT/config/init_db.sql\"\n
          \ \nEND_OF_COMMAND\n)\n"
        env:
        - name: EXTRA_MY_CNF
          value: /vt/vtdataroot/init/report-host.cnf:/vt/config/mycnf/master_mysql56.cnf
        image: vitess/lite:latest
        imagePullPolicy: Always
        name: mysql
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
        securityContext:
          runAsUser: 999
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /dev/log
          name: syslog
        - mountPath: /vt/vtdataroot
          name: vtdataroot
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - bash
        - -c
        - ' set -ex; mkdir -p $VTDATAROOT/tmp; chown vitess:vitess $VTDATAROOT $VTDATAROOT/tmp; '
        image: vitess/lite:latest
        imagePullPolicy: IfNotPresent
        name: init-vtdataroot
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /vt/vtdataroot
          name: vtdataroot
      - command:
        - bash
        - -c
        - " set -ex\n # Split pod name (via hostname) into prefix and ordinal index.\n
          hostname=$(hostname -s)\n [[ $hostname =~ ^(.+)-([0-9]+)$ ]] || exit 1\n
          pod_prefix=${BASH_REMATCH[1]}\n pod_index=${BASH_REMATCH[2]}\n # Prepend
          cell name since tablet UIDs must be globally unique.\n uid_name=zone1-$pod_prefix\n
          # Take MD5 hash of cellname-podprefix.\n uid_hash=$(echo -n $uid_name |
          md5sum | awk \"{print \\$1}\")\n # Take first 24 bits of hash, convert to
          decimal.\n # Shift left 2 decimal digits, add in index.\n tablet_uid=$((16#${uid_hash:0:6}
          * 100 + $pod_index))\n # Save UID for other containers to read.\n mkdir
          -p $VTDATAROOT/init\n echo $tablet_uid > $VTDATAROOT/init/tablet-uid\n #
          Tell MySQL what hostname to report in SHOW SLAVE HOSTS.\n # Orchestrator
          looks there, so it should match -tablet_hostname above.\n echo report-host=$hostname.vttablet
          > $VTDATAROOT/init/report-host.cnf\n "
        image: vitess/lite:latest
        imagePullPolicy: Always
        name: init-tablet-uid
        resources: {}
        securityContext:
          runAsUser: 999
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /vt/vtdataroot
          name: vtdataroot
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - hostPath:
          path: /dev/log
        name: syslog
      - hostPath:
          path: /etc/ssl/certs/ca-certificates.crt
        name: certs
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
      creationTimestamp: null
      name: vtdataroot
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    status:
      phase: Pending
status:
  replicas: 0
